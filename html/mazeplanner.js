// Generated by CoffeeScript 1.6.2
(function() {
  window.Game = (function() {
    function Game(width, height, context) {
      var col, row;

      this.width = width;
      this.height = height;
      this.context = context;
      this.grid = (function() {
        var _i, _results;

        _results = [];
        for (row = _i = 0; 0 <= height ? _i <= height : _i >= height; row = 0 <= height ? ++_i : --_i) {
          _results.push((function() {
            var _j, _results1;

            _results1 = [];
            for (col = _j = 0; 0 <= width ? _j <= width : _j >= width; col = 0 <= width ? ++_j : --_j) {
              if (Math.random() > 0.3) {
                _results1.push(0);
              } else {
                _results1.push(1);
              }
            }
            return _results1;
          })());
        }
        return _results;
      })();
      this.createhandlers();
      this.redrawContext();
    }

    Game.prototype.redrawContext = function() {
      var steps;

      $("canvas").clearCanvas();
      this.checkDims();
      steps = this.width / window.gridsize;
      this.context.canvas.width = this.width;
      this.context.canvas.height = this.height;
      return this.drawGrid(0, 0, steps);
    };

    Game.prototype.checkDims = function() {
      if (this.width !== window.innerWidth) {
        this.width = window.innerWidth;
      }
      if (this.height !== window.innerheight) {
        return this.height = window.innerHeight;
      }
    };

    Game.prototype.click = function(event) {
      return console.log(event);
    };

    Game.prototype.drawGrid = function(x, y, steps) {
      var i, j, start, vertsteps, _i, _results;

      vertsteps = (this.height / this.width) * steps;
      $('canvas').drawRect({
        layer: true,
        name: "border",
        group: "grid",
        strokeStyle: "#000",
        strokeWidth: 2,
        x: x,
        y: y,
        width: this.width,
        height: this.height,
        fromCenter: false
      });
      i = 0;
      while (i < this.width) {
        $("canvas").drawLine({
          layer: true,
          name: "vline" + i,
          group: "grid",
          strokeStyle: "#B0B0B0",
          strokeWidth: 1,
          x1: i,
          y1: 0,
          x2: i,
          y2: this.height
        });
        i += this.width / steps;
      }
      j = 0;
      while (j < this.height) {
        $("canvas").drawLine({
          layer: true,
          name: "hline" + j,
          group: "grid",
          strokeStyle: "#B0B0B0",
          strokeWidth: 1,
          x1: 0,
          y1: j,
          x2: this.width,
          y2: j
        });
        j += this.height / vertsteps;
      }
      start = 0;
      _results = [];
      for (x = _i = 0; 0 <= steps ? _i <= steps : _i >= steps; x = 0 <= steps ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;

          _results1 = [];
          for (y = _j = 0; 0 <= vertsteps ? _j <= vertsteps : _j >= vertsteps; y = 0 <= vertsteps ? ++_j : --_j) {
            if (this.grid[x][y] === 1) {
              _results1.push($("canvas").drawRect({
                fillStyle: "#000",
                x: start + x * gridsize,
                y: start + y * gridsize,
                width: gridsize,
                height: gridsize,
                fromCenter: false
              }));
            } else if (this.grid[x][y] === 2) {
              _results1.push($("canvas").drawRect({
                fillStyle: "#686868",
                x: start + x * gridsize,
                y: start + y * gridsize,
                width: gridsize,
                height: gridsize,
                fromCenter: false
              }));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Game.prototype.createhandlers = function() {
      var _this = this;

      return $(window).on({
        'click': function(e) {
          return _this.click(e);
        },
        "resize": function(e) {
          return _this.redrawContext();
        },
        "mousewheel": function(e, delta, deltaX, deltaY) {
          if (deltaY > 0) {
            if (window.gridsize < 40) {
              window.gridsize += deltaY;
            }
          } else {
            if (window.gridsize > 5) {
              window.gridsize += deltaY;
            }
          }
          return _this.redrawContext();
        }
      });
    };

    return Game;

  })();

}).call(this);
